import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:syncup_music_app/constants/constants.dart';
import 'package:syncup_music_app/model/cancion.dart';
import 'package:syncup_music_app/service/audio_player_service.dart';
import 'package:syncup_music_app/widgets/audio_player_widget.dart'; // 👈 Asegúrate de importar tu widget

class BusquedaScreen extends StatefulWidget {
  const BusquedaScreen({super.key});

  @override
  State<BusquedaScreen> createState() => _BusquedaScreenState();
}

class _BusquedaScreenState extends State<BusquedaScreen> {
  final AudioPlayerService _audioService = AudioPlayerService();

  final TextEditingController _tituloController = TextEditingController();
  final TextEditingController _artistaController = TextEditingController();
  final TextEditingController _generoController = TextEditingController();
  final TextEditingController _anioController = TextEditingController();

  String _logicaBusqueda = "AND";
  bool _busquedaAvanzada = false;

  List<String> _sugerencias = [];
  List<Cancion> _resultados = [];
  bool _isLoading = false;

  Future<void> _buscarSugerencias(String query) async {
    if (query.length < 2) return;

    try {
      final response = await http.get(
          Uri.parse('$baseUrl/api/canciones/autocompletar?query=$query'));
      if (response.statusCode == 200) {
        final List<dynamic> jsonList = jsonDecode(response.body);
        setState(() {
          _sugerencias = List<String>.from(jsonList);
        });
      }
    } catch (e) {
      debugPrint("Error en autocompletado: $e");
    }
  }

  Future<void> _buscarCanciones() async {
    setState(() => _isLoading = true);

    final uri = Uri.parse('$baseUrl/api/canciones/busqueda');
    final body = {
      "titulo": _tituloController.text.trim(),
      "logica": _logicaBusqueda,
      if (_busquedaAvanzada) ...{
        "artista": _artistaController.text.trim(),
        "genero": _generoController.text.trim(),
        "anio": _anioController.text.trim(),
      }
    };

    try {
      final response = await http.post(
        uri,
        body: jsonEncode(body),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final List<dynamic> listaJson = jsonDecode(response.body);
        setState(() {
          _resultados =
              listaJson.map((json) => Cancion.fromJson(json)).toList();
        });
      } else {
        throw Exception("Error de servidor");
      }
    } catch (e) {
      debugPrint("Error: $e");
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Error al buscar canciones")),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Widget _buildCampo(String label, TextEditingController controller) {
    return TextField(
      controller: controller,
      decoration: InputDecoration(
        labelText: label,
        filled: true,
        fillColor: Colors.grey.shade100,
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(title: const Text("Buscar canciones")),
      body: Column(
        children: [
          // ---------- CONTENIDO DE BÚSQUEDA ----------
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: ListView(
                children: [
                  Autocomplete<String>(
                    optionsBuilder: (TextEditingValue textEditingValue) {
                      _buscarSugerencias(textEditingValue.text);
                      return _sugerencias.where((s) => s
                          .toLowerCase()
                          .contains(textEditingValue.text.toLowerCase()));
                    },
                    fieldViewBuilder:
                        (context, controller, focusNode, onEditingComplete) {
                      return TextField(
                        controller: controller,
                        focusNode: focusNode,
                        onEditingComplete: onEditingComplete,
                        decoration: InputDecoration(
                          labelText: "Título de la canción",
                          filled: true,
                          fillColor: Colors.grey.shade100,
                          border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10)),
                        ),
                      );
                    },
                    onSelected: (String selection) {
                      _tituloController.text = selection;
                      _buscarCanciones();
                    },
                  ),

                  const SizedBox(height: 12),

                  SwitchListTile(
                    title: const Text("Búsqueda avanzada"),
                    value: _busquedaAvanzada,
                    onChanged: (value) {
                      setState(() => _busquedaAvanzada = value);
                    },
                  ),

                  if (_busquedaAvanzada) ...[
                    _buildCampo("Artista", _artistaController),
                    const SizedBox(height: 10),
                    _buildCampo("Género", _generoController),
                    const SizedBox(height: 10),
                    _buildCampo("Año", _anioController),
                    const SizedBox(height: 10),
                    Row(
                      children: [
                        const Text("Lógica:"),
                        const SizedBox(width: 10),
                        DropdownButton<String>(
                          value: _logicaBusqueda,
                          items: const [
                            DropdownMenuItem(value: "AND", child: Text("AND")),
                            DropdownMenuItem(value: "OR", child: Text("OR")),
                          ],
                          onChanged: (value) {
                            if (value != null) {
                              setState(() => _logicaBusqueda = value);
                            }
                          },
                        ),
                      ],
                    ),
                  ],

                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _buscarCanciones,
                    child: const Text("🔍 Buscar"),
                  ),
                  const SizedBox(height: 20),

                  if (_isLoading)
                    const Center(child: CircularProgressIndicator()),
                  if (!_isLoading && _resultados.isEmpty)
                    const Center(child: Text("No se encontraron resultados")),

                  ..._resultados.map((cancion) => ListTile(
                        title: Text(cancion.titulo),
                        subtitle: Text(
                            "${cancion.artista} • ${cancion.genero} • ${cancion.anio}"),
                        onTap: () {
                          _audioService.playSong(cancion.nombreArchivo!, cancion.titulo);
                        },
                      )),
                ],
              ),
            ),
          ),

          // ---------- REPRODUCTOR FIJO ABAJO ----------
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            child: AudioPlayerWidget(),
          ),
        ],
      ),
    );
  }
}
