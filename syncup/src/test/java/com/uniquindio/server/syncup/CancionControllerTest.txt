package com.uniquindio.server.syncup;

import com.uniquindio.server.syncup.controller.CancionController;
import com.uniquindio.server.syncup.dto.BusquedaRequest;
import com.uniquindio.server.syncup.model.Cancion;

import org.junit.jupiter.api.Test;

import org.springframework.http.ResponseEntity;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class CancionControllerTest {

    private final CancionController controller = new CancionController();

    @Test
    void testBusquedaCancionesAND() {
        BusquedaRequest request = new BusquedaRequest();
        request.setTitulo("Alone");
        request.setArtista("Alan Walker");
        request.setGenero("");  // vacío significa no filtrar
        request.setAnio("");
        request.setLogica("AND");

        ResponseEntity<List<Cancion>> response = controller.buscarCanciones(request);
        List<Cancion> resultados = response.getBody();

        assertNotNull(resultados, "La lista de resultados no debe ser nula");
        assertFalse(resultados.isEmpty(), "Debe encontrar al menos una canción");

        Cancion cancion = resultados.get(0);

        assertTrue(cancion.getTitulo().toLowerCase().contains("alone"));
        assertTrue(cancion.getArtista().toLowerCase().contains("alan walker"));
    }

    @Test
    void testBusquedaCancionesOR() {
        BusquedaRequest request = new BusquedaRequest();
        request.setTitulo("Alone");
        request.setArtista("NoExiste");
        request.setGenero("");
        request.setAnio("");
        request.setLogica("OR");

        ResponseEntity<List<Cancion>> response = controller.buscarCanciones(request);
        List<Cancion> resultados = response.getBody();

        assertNotNull(resultados);
        assertFalse(resultados.isEmpty(), "Debe encontrar canciones por título con lógica OR");
    }

    @Test
    void testBusquedaCancionesSinResultados() {
        BusquedaRequest request = new BusquedaRequest();
        request.setTitulo("NoExiste");
        request.setArtista("TampocoExiste");
        request.setGenero("");
        request.setAnio("");
        request.setLogica("AND");

        ResponseEntity<List<Cancion>> response = controller.buscarCanciones(request);
        List<Cancion> resultados = response.getBody();

        assertNotNull(resultados);
        assertTrue(resultados.isEmpty(), "No debería encontrar resultados para filtros irreales");
    }
}

